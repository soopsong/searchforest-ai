quantum computers ( qcs ) , once they mature , will be able to solve some problems faster than classic computers . this phenomenon is called"quantum advantage"(or a stronger term"quantum supremacy " ) . quantum advantage will help us to speed up computations in many areas , from artificial intelligence to medicine . however , qc power can also be leveraged to break modern cryptographic algorithms , which pervade modern software : use cases range from encryption of internet traffic , to encryption of disks , to signing blockchain ledgers . while the exact date when qcs will evolve to reach quantum advantage is unknown , the consensus is that this future is near . thus , in order to maintain crypto agility of the software , one needs to start preparing for the era of quantum advantage proactively . in this paper , we recap the effect of quantum advantage on the existing and new software systems , as well as the data that we currently store . we also highlight similarities and differences between the security challenges brought by qcs and the challenges that software engineers faced twenty years ago while fixing widespread y2k bug . technically , the y2k bug and the quantum advantage problems are different : the former was caused by timing - related problems , while the latter is caused by a cryptographic algorithm being non - quantum - resistant . however , conceptually , the problems are similar : we know what the root cause is , the fix ( strategically ) is straightforward , yet the implementation of the fix is challenging . to address the quantum advantage challenge , we create a seven - step roadmap , deemed 7e . it is inspired by the lessons - learnt from the y2k era amalgamated with modern knowledge . the roadmap gives developers a structured way to start preparing for the quantum advantage era , helping them to start planning for the creation of new as well as the evolution of the existent software .