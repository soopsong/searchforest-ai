memristors have been suggested as a novel route to neuromorphic computing based on the similarity between them and neurons ( specifically synapses and ion pumps ) . the d.c . action of the memristor is a current spike which imparts a short - term memory to the device . here it is demonstrated that this short - term memory works exactly like habituation ( e.g. in \emph{aplysia } ) . we elucidate the physical rules , based on energy conservation , governing the interaction of these current spikes : summation , ` bounce - back ' , directionality and ` diminishing returns ' . using these rules , we introduce 4 different logical systems to implement sequential logic in the memristor and demonstrate how sequential logic works by instantiating a not gate , an and gate , an xor gate and a full adder with a single memristor . the full adder makes use of the memristor 's short - term memory to add together three binary values and outputs the sum , the carry digit and even the order they were input in . a memristor full adder also outputs the arithmetical sum of bits , allowing for a logically ( but not physically ) reversible system . essentially , we can replace an input / output port with an extra time - step , allowing a single memristor to do a hither - to unexpectedly large amount of computation . this makes up for the memristor 's slow operation speed and may relate to how neurons do a similarly - large computation with such slow operations speeds . we propose that using spiking logic , either in gates or as neuron - analogues , with plastic rewritable connections between them , would allow the building of a neuromorphic computer .