computational devices combining two or more different parts , one controlling the operation of the other , for example , derive their power from the interaction , in addition to the capabilities of the parts . non - classical computation has tended to consider only single computational models : neural , analog , quantum , chemical , biological , neglecting to account for the contribution from the experimental controls . in this position paper , we propose a framework suitable for analysing combined computational models , from abstract theory to practical programming tools . focusing on the simplest example of one system controlled by another through a sequence of operations in which only one system is active at a time , the output from one system becomes the input to the other for the next step , and vice versa . we outline the categorical machinery required for handling diverse computational systems in such combinations , with their interactions explicitly accounted for . drawing on prior work in refinement and retrenchment , we suggest an appropriate framework for developing programming tools from the categorical framework . we place this work in the context of two contrasting concepts of"efficiency " : theoretical comparisons to determine the relative computational power do not always reflect the practical comparison of real resources for a finite - sized computational task , especially when the inputs include ( approximations of ) real numbers . finally we outline the limitations of our simple model , and identify some of the extensions that will be required to treat more complex interacting computational systems .